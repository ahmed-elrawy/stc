{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./auth.service\";\nexport class AuthGuard {\n  constructor(router, auth) {\n    this.router = router;\n    this.auth = auth;\n  }\n  canActivate(route, state) {\n    const user = this.auth.isLogged();\n    if (user) {\n      // authorised so return true\n      return true;\n    }\n    // not logged in so redirect to login page with the return url\n    // { queryParams: { returnUrl: state.url }}\n    this.router.navigate(['/login'], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n    return false;\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EACpBC,YACYC,MAAc,EACdC,IAAiB;IADjB,WAAM,GAAND,MAAM;IACN,SAAI,GAAJC,IAAI;EACb;EAEHC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IAEjE,MAAMC,IAAI,GAAG,IAAI,CAACJ,IAAI,CAACK,QAAQ,EAAE;IACjC,IAAID,IAAI,EAAE;MACN;MACA,OAAO,IAAI;;IAGf;IACA;IACA,IAAI,CAACL,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAC;MAAEC,WAAW,EAAE;QAAEC,SAAS,EAAEL,KAAK,CAACM;MAAG;IAAE,CAAC,CAAC;IACzE,OAAO,KAAK;EAChB;;AAlBWZ,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAa,SAATb,SAAS;EAAAc,YAHR;AAAM","names":["AuthGuard","constructor","router","auth","canActivate","route","state","user","isLogged","navigate","queryParams","returnUrl","url","factory","providedIn"],"sourceRoot":"","sources":["D:\\dev\\stc\\stc\\src\\app\\features\\login\\auth-guard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(\r\n      private router: Router,\r\n      private auth: AuthService\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n\r\n      const user = this.auth.isLogged();\r\n      if (user) {\r\n          // authorised so return true\r\n          return true;\r\n      }\r\n\r\n      // not logged in so redirect to login page with the return url\r\n      // { queryParams: { returnUrl: state.url }}\r\n      this.router.navigate(['/login'],{ queryParams: { returnUrl: state.url }});\r\n      return false;\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}