{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.jwt = new JwtHelperService();\n  }\n  signIn(email, password) {\n    return this.http.post('/api/auth', {\n      email,\n      password\n    }).pipe(map(response => {\n      if (response && response.token) {\n        const decodedToken = this.jwt.decodeToken(response.token);\n        console.log(decodedToken);\n        localStorage.setItem('token', response.token);\n        return true;\n      }\n      return false;\n    }));\n  }\n  signOut() {\n    localStorage.clear();\n  }\n  isLogged() {\n    if (this.getUser() !== null) {\n      return true;\n    }\n    return false;\n  }\n  isAdmin() {\n    const token = localStorage.getItem('token');\n    if (token) {\n      const decodedToken = this.jwt.decodeToken(token);\n      return decodedToken['admin'] ? true : false;\n    }\n    return false;\n  }\n  getUser() {\n    const token = localStorage.getItem('token');\n    if (token) {\n      const decodedToken = this.jwt.decodeToken(token);\n      return decodedToken;\n    }\n    return null;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,GAAG,QAAQ,gBAAgB;AACpC,SAASC,gBAAgB,QAAQ,oBAAoB;;;;AAerD,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAF5C,QAAG,GAAG,IAAIJ,gBAAgB,EAAE;EAE2B;EAE/DK,MAAM,CAACC,KAAa,EAAEC,QAAgB;IACpC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAc,WAAW,EAAE;MAAEF,KAAK;MAAEC;IAAQ,CAAE,CAAC,CAACE,IAAI,CACvEV,GAAG,CAAEW,QAAQ,IAAI;MACf,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAC9B,MAAMC,YAAY,GAAG,IAAI,CAACC,GAAG,CAACC,WAAW,CAACJ,QAAQ,CAACC,KAAK,CAAC;QACzDI,OAAO,CAACC,GAAG,CAACJ,YAAY,CAAC;QAEzBK,YAAY,CAACC,OAAO,CAAC,OAAO,EAAER,QAAQ,CAACC,KAAK,CAAC;QAC7C,OAAO,IAAI;;MAEb,OAAO,KAAK;IACd,CAAC,CAAC,CACH;EACH;EAEAQ,OAAO;IACLF,YAAY,CAACG,KAAK,EAAE;EACtB;EAEAC,QAAQ;IACN,IAAI,IAAI,CAACC,OAAO,EAAE,KAAK,IAAI,EAAE;MAC3B,OAAO,IAAI;;IAEb,OAAO,KAAK;EACd;EAEAC,OAAO;IACL,MAAMZ,KAAK,GAAGM,YAAY,CAACO,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIb,KAAK,EAAE;MACT,MAAMC,YAAY,GAAG,IAAI,CAACC,GAAG,CAACC,WAAW,CAACH,KAAK,CAAC;MAChD,OAAOC,YAAY,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG,KAAK;;IAE7C,OAAO,KAAK;EACd;EAEAU,OAAO;IACL,MAAMX,KAAK,GAAGM,YAAY,CAACO,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIb,KAAK,EAAE;MACT,MAAMC,YAAY,GAAG,IAAI,CAACC,GAAG,CAACC,WAAW,CAACH,KAAK,CAAC;MAChD,OAAOC,YAAoB;;IAE7B,OAAO,IAAI;EACb;;AA/CWX,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAwB,SAAXxB,WAAW;EAAAyB,YAFV;AAAM","names":["map","JwtHelperService","AuthService","constructor","http","router","signIn","email","password","post","pipe","response","token","decodedToken","jwt","decodeToken","console","log","localStorage","setItem","signOut","clear","isLogged","getUser","isAdmin","getItem","factory","providedIn"],"sourceRoot":"","sources":["D:\\dev\\stc\\stc\\src\\app\\features\\login\\auth.service.ts"],"sourcesContent":["import { Injectable, Optional } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { Router } from '@angular/router';\n\nexport interface User {\n  username: string;\n  name: string;\n  admin: boolean;\n}\ninterface TokenAnswer {\n  token: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private jwt = new JwtHelperService();\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  signIn(email: string, password: string) {\n    return this.http.post<TokenAnswer>('/api/auth', { email, password }).pipe(\n      map((response) => {\n        if (response && response.token) {\n          const decodedToken = this.jwt.decodeToken(response.token);\n          console.log(decodedToken);\n\n          localStorage.setItem('token', response.token);\n          return true;\n        }\n        return false;\n      })\n    );\n  }\n\n  signOut() {\n    localStorage.clear();\n  }\n\n  isLogged() {\n    if (this.getUser() !== null) {\n      return true;\n    }\n    return false;\n  }\n\n  isAdmin() {\n    const token = localStorage.getItem('token');\n    if (token) {\n      const decodedToken = this.jwt.decodeToken(token);\n      return decodedToken['admin'] ? true : false;\n    }\n    return false;\n  }\n\n  getUser(): User | null {\n    const token = localStorage.getItem('token');\n    if (token) {\n      const decodedToken = this.jwt.decodeToken(token);\n      return decodedToken as User;\n    }\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}