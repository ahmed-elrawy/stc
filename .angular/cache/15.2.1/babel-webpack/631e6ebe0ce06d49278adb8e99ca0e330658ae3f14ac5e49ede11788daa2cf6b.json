{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./auth.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/card\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/form-field\";\nfunction LoginComponent_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Email inv\\u00E1lido\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_mat_error_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Email n\\u00E3o cadastrado ou senha inv\\u00E1lida \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵstyleProp(\"margin-bottom\", 10, \"px\");\n  }\n}\nexport class LoginComponent {\n  constructor(formBuilder, router, auth, route) {\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.auth = auth;\n    this.route = route;\n    this.width = 300;\n    this.invalidCredentials = false;\n    this.authForm = formBuilder.group({\n      email: ['user@domain.com', [Validators.email, Validators.required]],\n      passwd: ['user', [Validators.minLength(4), Validators.required]]\n    });\n  }\n  requestSignIn() {\n    localStorage.clear();\n    const email = this.authForm.get('email')?.value;\n    const passwd = this.authForm.get('passwd')?.value;\n    console.log(email);\n    console.log(passwd);\n    this.auth.signIn(email, passwd).subscribe(isConnected => {\n      console.log(isConnected);\n      if (isConnected) {\n        const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n        this.router.navigateByUrl(returnUrl);\n      } else {\n        this.invalidCredentials = true;\n      }\n    });\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AuthService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  inputs: {\n    logo: \"logo\",\n    width: \"width\"\n  },\n  decls: 18,\n  vars: 8,\n  consts: [[2, \"margin\", \"auto\", \"top\", \"150px\"], [1, \"center\", 3, \"src\", \"width\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"block\"], [\"matInput\", \"\", \"placeholder\", \"Digite seu email\", \"type\", \"text\", \"formControlName\", \"email\"], [4, \"ngIf\"], [\"matInput\", \"\", \"placeholder\", \"Digite sua senha\", \"type\", \"password\", \"formControlName\", \"passwd\"], [3, \"marginBottom\", 4, \"ngIf\"], [\"color\", \"primary\", \"mat-raised-button\", \"\", 3, \"disabled\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-card\", 0)(1, \"mat-card-content\");\n      i0.ɵɵelement(2, \"img\", 1);\n      i0.ɵɵelementStart(3, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.requestSignIn();\n      });\n      i0.ɵɵelementStart(4, \"mat-form-field\", 3)(5, \"mat-label\");\n      i0.ɵɵtext(6, \"E-mail\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 4);\n      i0.ɵɵtemplate(8, LoginComponent_mat_error_8_Template, 2, 0, \"mat-error\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"mat-form-field\", 3)(10, \"mat-label\");\n      i0.ɵɵtext(11, \"Senha\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 6);\n      i0.ɵɵelementStart(13, \"mat-error\");\n      i0.ɵɵtext(14, \"M\\u00EDnimo de 4 caracteres\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(15, LoginComponent_mat_error_15_Template, 2, 2, \"mat-error\", 7);\n      i0.ɵɵelementStart(16, \"button\", 8);\n      i0.ɵɵtext(17, \" ENTRAR \");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.width, \"px\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"src\", ctx.logo, i0.ɵɵsanitizeUrl)(\"width\", ctx.width / 2);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.authForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.authForm.invalid);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.invalidCredentials);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.authForm.invalid);\n    }\n  },\n  dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i5.MatButton, i6.MatCard, i6.MatCardContent, i7.MatInput, i8.MatFormField, i8.MatLabel, i8.MatError],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AACA,SAA8CA,UAAU,QAAQ,gBAAgB;;;;;;;;;;;;ICMtEC,iCAAoC;IAAAA,mCAAc;IAAAA,iBAAY;;;;;IAOhEA,iCAAmE;IACjEA,kEACF;IAAAA,iBAAY;;;IAF0BA,yCAA4B;;;ADL1E,OAAM,MAAOC,cAAc;EAMzBC,YAAoBC,WAAwB,EAAUC,MAAc,EAAUC,IAAiB,EAAUC,KAAqB;IAA1G,gBAAW,GAAXH,WAAW;IAAuB,WAAM,GAANC,MAAM;IAAkB,SAAI,GAAJC,IAAI;IAAuB,UAAK,GAALC,KAAK;IAJrG,UAAK,GAAG,GAAG;IAEpB,uBAAkB,GAAG,KAAK;IAGxB,IAAI,CAACC,QAAQ,GAAGJ,WAAW,CAACK,KAAK,CAAC;MAChCC,KAAK,EAAE,CAAC,iBAAiB,EAAG,CAAEV,UAAU,CAACU,KAAK,EAAEV,UAAU,CAACW,QAAQ,CAAE,CAAC;MACtEC,MAAM,EAAE,CAAC,MAAM,EAAE,CAAEZ,UAAU,CAACa,SAAS,CAAC,CAAC,CAAC,EAAEb,UAAU,CAACW,QAAQ,CAAE;KAClE,CAAC;EACJ;EAEAG,aAAa;IACXC,YAAY,CAACC,KAAK,EAAE;IACpB,MAAMN,KAAK,GAAG,IAAI,CAACF,QAAQ,CAACS,GAAG,CAAC,OAAO,CAAC,EAAEC,KAAK;IAC/C,MAAMN,MAAM,GAAG,IAAI,CAACJ,QAAQ,CAACS,GAAG,CAAC,QAAQ,CAAC,EAAEC,KAAK;IACjDC,OAAO,CAACC,GAAG,CAACV,KAAK,CAAC;IAClBS,OAAO,CAACC,GAAG,CAACR,MAAM,CAAC;IAEnB,IAAI,CAACN,IAAI,CAACe,MAAM,CAACX,KAAK,EAAEE,MAAM,CAAC,CAACU,SAAS,CAACC,WAAW,IAAG;MACtDJ,OAAO,CAACC,GAAG,CAACG,WAAW,CAAC;MAExB,IAAIA,WAAW,EAAE;QACf,MAAMC,SAAS,GAAG,IAAI,CAACjB,KAAK,CAACkB,QAAQ,CAACC,WAAW,CAAC,WAAW,CAAC,IAAI,GAAG;QACrE,IAAI,CAACrB,MAAM,CAACsB,aAAa,CAACH,SAAS,CAAC;OAAQ,MACzC;QACH,IAAI,CAACI,kBAAkB,GAAG,IAAI;;IAElC,CAAC,CAAC;EACJ;;AA9BW1B,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAA2B;EAAAC;IAAAC;IAAAC;EAAA;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCT3BnC,mCAAoE;MAE9DA,yBAAmD;MACnDA,+BAA0D;MAApDA;QAAA,OAAYoC,mBAAe;MAAA,EAAC;MAChCpC,yCAA8B;MACjBA,sBAAM;MAAAA,iBAAY;MAC7BA,2BAAmF;MACnFA,2EAA8D;MAChEA,iBAAiB;MACjBA,yCAA8B;MACjBA,sBAAK;MAAAA,iBAAY;MAC5BA,4BAAwF;MACxFA,kCAAW;MAAAA,4CAAsB;MAAAA,iBAAY;MAE/CA,6EAEY;MACZA,kCAAwE;MACtEA,yBACF;MAAAA,iBAAS;;;MAnBPA,wCAAwB;MAEvBA,eAAY;MAAZA,gDAAY;MACkBA,eAAsB;MAAtBA,wCAAsB;MAIzCA,eAAsB;MAAtBA,2CAAsB;MAOxBA,eAAwB;MAAxBA,6CAAwB;MAGMA,eAA6B;MAA7BA,+CAA6B","names":["Validators","i0","LoginComponent","constructor","formBuilder","router","auth","route","authForm","group","email","required","passwd","minLength","requestSignIn","localStorage","clear","get","value","console","log","signIn","subscribe","isConnected","returnUrl","snapshot","queryParams","navigateByUrl","invalidCredentials","selectors","inputs","logo","width","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\dev\\stc\\stc\\src\\app\\features\\login\\login.component.ts","D:\\dev\\stc\\stc\\src\\app\\features\\login\\login.component.html"],"sourcesContent":["import { Component, Input } from '@angular/core';\r\nimport { FormControl, FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n})\r\nexport class LoginComponent {\r\n  @Input() logo?: string\r\n  @Input() width = 300;\r\n  authForm!: FormGroup;\r\n  invalidCredentials = false;\r\n\r\n  constructor(private formBuilder: FormBuilder, private router: Router, private auth: AuthService, private route: ActivatedRoute,) {\r\n    this.authForm = formBuilder.group({\r\n      email: ['user@domain.com',  [ Validators.email, Validators.required ]],\r\n      passwd: ['user', [ Validators.minLength(4), Validators.required ]]\r\n    });\r\n  }\r\n\r\n  requestSignIn() {\r\n    localStorage.clear()\r\n    const email = this.authForm.get('email')?.value;\r\n    const passwd = this.authForm.get('passwd')?.value;\r\n    console.log(email);\r\n    console.log(passwd);\r\n    \r\n    this.auth.signIn(email, passwd).subscribe(isConnected => {\r\n      console.log(isConnected);\r\n      \r\n      if (isConnected) {\r\n        const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n        this.router.navigateByUrl(returnUrl);      }\r\n      else {\r\n        this.invalidCredentials = true;\r\n      }\r\n    })\r\n  }\r\n}","<mat-card [style.width.px]=\"width\" style=\"margin: auto; top: 150px\">\r\n    <mat-card-content>\r\n      <img [src]=\"logo\" class=\"center\" [width]=\"width/2\">\r\n      <form (ngSubmit)=\"requestSignIn()\" [formGroup]=\"authForm\">\r\n        <mat-form-field class=\"block\">\r\n          <mat-label>E-mail</mat-label>\r\n          <input matInput placeholder=\"Digite seu email\" type=\"text\" formControlName=\"email\">\r\n          <mat-error *ngIf=\"authForm.invalid\">Email inválido</mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field class=\"block\">\r\n          <mat-label>Senha</mat-label>\r\n          <input matInput placeholder=\"Digite sua senha\" type=\"password\" formControlName=\"passwd\">\r\n          <mat-error>Mínimo de 4 caracteres</mat-error>\r\n        </mat-form-field>\r\n        <mat-error *ngIf=\"invalidCredentials\" [style.marginBottom.px]=\"10\">\r\n          Email não cadastrado ou senha inválida\r\n        </mat-error>\r\n        <button color=\"primary\" mat-raised-button [disabled]=\"authForm.invalid\">\r\n          ENTRAR\r\n        </button>\r\n      </form>\r\n    </mat-card-content>\r\n  </mat-card>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}