{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.jwt = new JwtHelperService();\n  }\n  signIn(email, password) {\n    return this.http.post('/api/auth', {\n      email,\n      password\n    }).pipe(map(response => {\n      if (response && response.token) {\n        const decodedToken = this.jwt.decodeToken(response.token);\n        localStorage.setItem('token', response.token);\n        return true;\n      }\n      return false;\n    }));\n  }\n  signOut() {\n    localStorage.clear();\n    this.router.navigate(['/']);\n  }\n  isLogged() {\n    if (this.getUser() !== null) {\n      return true;\n    }\n    return false;\n  }\n  isAdmin() {\n    const token = localStorage.getItem('token');\n    if (token) {\n      const decodedToken = this.jwt.decodeToken(token);\n      return decodedToken['admin'] ? true : false;\n    }\n    return false;\n  }\n  getUser() {\n    const token = localStorage.getItem('token');\n    if (token) {\n      const decodedToken = this.jwt.decodeToken(token);\n      return decodedToken;\n    }\n    return null;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,GAAG,QAAQ,gBAAgB;AACpC,SAASC,gBAAgB,QAAQ,oBAAoB;;;;AAerD,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAF5C,QAAG,GAAG,IAAIJ,gBAAgB,EAAE;EAE2B;EAE/DK,MAAM,CAACC,KAAa,EAAEC,QAAgB;IACpC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAc,WAAW,EAAE;MAAEF,KAAK;MAAEC;IAAQ,CAAE,CAAC,CAACE,IAAI,CACvEV,GAAG,CAAEW,QAAQ,IAAI;MACf,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAC9B,MAAMC,YAAY,GAAG,IAAI,CAACC,GAAG,CAACC,WAAW,CAACJ,QAAQ,CAACC,KAAK,CAAC;QACzDI,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEN,QAAQ,CAACC,KAAK,CAAC;QAC7C,OAAO,IAAI;;MAEb,OAAO,KAAK;IACd,CAAC,CAAC,CACH;EACH;EAEAM,OAAO;IACLF,YAAY,CAACG,KAAK,EAAE;IACpB,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAC7B;EAEAC,QAAQ;IACN,IAAI,IAAI,CAACC,OAAO,EAAE,KAAK,IAAI,EAAE;MAC3B,OAAO,IAAI;;IAEb,OAAO,KAAK;EACd;EAEAC,OAAO;IACL,MAAMX,KAAK,GAAGI,YAAY,CAACQ,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIZ,KAAK,EAAE;MACT,MAAMC,YAAY,GAAG,IAAI,CAACC,GAAG,CAACC,WAAW,CAACH,KAAK,CAAC;MAChD,OAAOC,YAAY,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG,KAAK;;IAE7C,OAAO,KAAK;EACd;EAEAS,OAAO;IACL,MAAMV,KAAK,GAAGI,YAAY,CAACQ,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIZ,KAAK,EAAE;MACT,MAAMC,YAAY,GAAG,IAAI,CAACC,GAAG,CAACC,WAAW,CAACH,KAAK,CAAC;MAChD,OAAOC,YAAoB;;IAE7B,OAAO,IAAI;EACb;;AA9CWX,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAuB,SAAXvB,WAAW;EAAAwB,YAFV;AAAM","names":["map","JwtHelperService","AuthService","constructor","http","router","signIn","email","password","post","pipe","response","token","decodedToken","jwt","decodeToken","localStorage","setItem","signOut","clear","navigate","isLogged","getUser","isAdmin","getItem","factory","providedIn"],"sourceRoot":"","sources":["D:\\dev\\stc\\stc\\src\\app\\features\\login\\auth.service.ts"],"sourcesContent":["import { Injectable, Optional } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { Router } from '@angular/router';\r\n\r\nexport interface User {\r\n  username: string;\r\n  name: string;\r\n  admin: boolean;\r\n}\r\ninterface TokenAnswer {\r\n  token: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private jwt = new JwtHelperService();\r\n\r\n  constructor(private http: HttpClient, private router: Router) {}\r\n\r\n  signIn(email: string, password: string) {\r\n    return this.http.post<TokenAnswer>('/api/auth', { email, password }).pipe(\r\n      map((response) => {\r\n        if (response && response.token) {\r\n          const decodedToken = this.jwt.decodeToken(response.token);\r\n          localStorage.setItem('token', response.token);\r\n          return true;\r\n        }\r\n        return false;\r\n      })\r\n    );\r\n  }\r\n\r\n  signOut() {\r\n    localStorage.clear();\r\n    this.router.navigate(['/'])\r\n  }\r\n\r\n  isLogged() {\r\n    if (this.getUser() !== null) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  isAdmin() {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      const decodedToken = this.jwt.decodeToken(token);\r\n      return decodedToken['admin'] ? true : false;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getUser(): User | null {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      const decodedToken = this.jwt.decodeToken(token);\r\n      return decodedToken as User;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}