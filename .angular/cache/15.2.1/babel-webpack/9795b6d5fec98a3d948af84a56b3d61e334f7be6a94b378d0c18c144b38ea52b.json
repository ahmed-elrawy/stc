{"ast":null,"code":"import { inject } from '@angular/core';\nimport { AuthService } from '@app/features/login/auth.service';\nimport * as i0 from \"@angular/core\";\nexport class UserPermissionsService {\n  constructor() {\n    this.auth = inject(AuthService);\n    this.hasPermissions = permissions => {\n      if (this.auth.isLogged()) {\n        if (permissions.includes('ADMIN')) {\n          return this.auth.isAdmin();\n        } else if (permissions.includes('USER')) {\n          return !this.auth.isAdmin();\n        }\n      }\n      return false;\n    };\n  }\n}\nUserPermissionsService.ɵfac = function UserPermissionsService_Factory(t) {\n  return new (t || UserPermissionsService)();\n};\nUserPermissionsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserPermissionsService,\n  factory: UserPermissionsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAASA,MAAM,QAAoB,eAAe;AAClD,SAASC,WAAW,QAAQ,kCAAkC;;AAS9D,OAAM,MAAOC,sBAAsB;EAHnCC;IAIa,SAAI,GAAIH,MAAM,CAACC,WAAW,CAAC;IAEpC,mBAAc,GAAIG,WAAyB,IAAI;MAC7C,IAAG,IAAI,CAACC,IAAI,CAACC,QAAQ,EAAE,EAAC;QACtB,IAAGF,WAAW,CAACG,QAAQ,CAAC,OAAO,CAAC,EAAE;UAChC,OAAO,IAAI,CAACF,IAAI,CAACG,OAAO,EAAE;SAC3B,MAAK,IAAIJ,WAAW,CAACG,QAAQ,CAAC,MAAM,CAAC,EAAC;UACrC,OAAO,CAAC,IAAI,CAACF,IAAI,CAACG,OAAO,EAAE;;;MAG/B,OAAO,KAAK;IACd,CAAC;;;AAZQN,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAO,SAAtBP,sBAAsB;EAAAQ,YAFrB;AAAM","names":["inject","AuthService","UserPermissionsService","constructor","permissions","auth","isLogged","includes","isAdmin","factory","providedIn"],"sourceRoot":"","sources":["D:\\dev\\stc\\stc\\src\\app\\core\\guards\\user- permission.service.ts"],"sourcesContent":["import { inject, Injectable } from '@angular/core';\r\nimport { AuthService } from '@app/features/login/auth.service';\r\n\r\n\r\nexport type Permission = 'ADMIN' | 'USER' | 'MANAGER';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserPermissionsService   {\r\n   protected auth  = inject(AuthService)\r\n\r\n    hasPermissions = (permissions: Permission[]) =>{\r\n      if(this.auth.isLogged()){\r\n        if(permissions.includes('ADMIN')) {\r\n          return this.auth.isAdmin()\r\n        }else if (permissions.includes('USER')){\r\n          return !this.auth.isAdmin()\r\n        }\r\n      }\r\n      return false\r\n    }\r\n\r\n  \r\n}\r\n\r\n\r\n// @Injectable({ providedIn: 'root' })\r\n// export class PermissionService {\r\n//   isAllowed(permissions?: boolean) {\r\n\r\n//     return permissions?.includes(user.permission);\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}